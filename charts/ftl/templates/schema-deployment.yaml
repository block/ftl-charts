{{ $version := printf "v%s" .Chart.Version -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ftl.fullname" . }}-schema
  labels:
    {{- include "ftl.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.schema.replicas }}
  podManagementPolicy: Parallel
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  ordinals:
    start: 1
  revisionHistoryLimit: {{ .Values.schema.revisionHistoryLimit }}
  serviceName: {{ .Values.schema.serviceName }}
  selector:
    matchLabels:
      {{- include "ftl-schema.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ftl-schema.selectorLabels" . | nindent 8 }}
      annotations:
      {{- if .Values.schema.podAnnotations }}
        {{- toYaml .Values.schema.podAnnotations | nindent 8 }}
      {{- end }}
      {{ if .Values.istio.holdApplicationUntilProxyStarts }}
        proxy.istio.io/config: |
          holdApplicationUntilProxyStarts: true
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.schema.serviceAccountName }}
      containers:
        - name: app
          image: "{{ .Values.schema.image.repository | default (printf "%s/%s" .Values.image.base .Values.schema.image.name) }}:{{ .Values.schema.image.tag | default .Values.image.tag | default $version }}"
          imagePullPolicy: {{ .Values.schema.image.pullPolicy }}
          {{- if .Values.schema.envFrom }}
          envFrom:
            {{- if .Values.schema.envFrom }}
            {{- toYaml .Values.schema.envFrom | nindent 12 }}
            {{- end }}
          {{- else if or .Values.secrets.logEncryptionKey .Values.secrets.asyncEncryptionKey }}
          envFrom:
            - secretRef:
                name: {{ include "ftl.fullname" . }}-secrets
          {{- end }}
          volumeMounts:
          - name: schema-raft-storage
            mountPath: /data/raft
          env:
            {{- if .Values.schema.env }}
            {{- toYaml .Values.schema.env | nindent 12 }}
            {{- end }}
            - name: FTL_BIND
              value: "http://0.0.0.0:{{ .Values.schema.services.schema.containerPort }}"
            - name: RAFT_INITIAL_MEMBERS
              value: "{{- range $index := until (.Values.schema.replicas | int ) }}{{- if ne $index 0 -}},{{- end -}}ftl-schema-{{ add $index 1  }}.ftl-schema-raft:{{$.Values.schema.services.raft.port}}{{- end -}}"
            - name: RAFT_INITIAL_REPLICA_IDS
              value: "{{- range $index := until (.Values.schema.replicas | int ) }}{{- if ne $index 0 -}},{{- end -}}{{ add $index 1  }}{{- end -}}"
            - name: RAFT_DATA_DIR
              value: "/data/raft"
            - name: ORDINAL_NUMBER
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: RAFT_ADDRESS
              value: "ftl-schema-$(ORDINAL_NUMBER).ftl-schema-raft:{{$.Values.schema.services.raft.port}}"
            - name: RAFT_LISTEN_ADDRESS
              value: "$(MY_POD_IP):{{$.Values.schema.services.raft.port}}"
            - name: RAFT_CONTROL_ADDRESS
              value: "http://ftl-schema:8892"
          ports:
            - name: http
              containerPort: {{ .Values.schema.services.schema.containerPort }}
              protocol: "TCP"
            - name: raft
              containerPort: {{ .Values.schema.services.raft.containerPort }}
              protocol: "TCP"
          {{- include "ftl.healthProbes" .Values.schema | nindent 10 }}
      {{- include "ftl.commonPodConfig" .Values.schema | nindent 6 }}

  volumeClaimTemplates:
  - metadata:
      name: schema-raft-storage  # This name will be used as a PVC name
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.schema.storage }}