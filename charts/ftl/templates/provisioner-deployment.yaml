{{ $version := printf "v%s" .Chart.Version -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ftl.fullname" . }}-provisioner
  labels:
    {{- include "ftl.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.provisioner.replicas }}
  revisionHistoryLimit: {{ .Values.provisioner.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "ftl-provisioner.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ftl-provisioner.selectorLabels" . | nindent 8 }}
      annotations:
      {{- if .Values.provisioner.podAnnotations }}
        {{- toYaml .Values.provisioner.podAnnotations | nindent 8 }}
      {{- end }}
      {{ if .Values.istio.holdApplicationUntilProxyStarts }}
        proxy.istio.io/config: |
          holdApplicationUntilProxyStarts: true
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.provisioner.serviceAccountName }}
      containers:
        - name: app
          image: "{{ .Values.provisioner.image.repository | default (printf "%s/%s" .Values.image.base .Values.provisioner.image.name) }}:{{ .Values.provisioner.image.tag | default .Values.image.tag | default $version }}"
          imagePullPolicy: {{ .Values.provisioner.image.pullPolicy | default .Values.image.pullPolicy  }}
          {{- if .Values.provisioner.envFrom }}
          envFrom:
            {{- if .Values.provisioner.envFrom }}
            {{- toYaml .Values.provisioner.envFrom | nindent 12 }}
            {{- end }}
          {{- else if or .Values.secrets.logEncryptionKey .Values.secrets.asyncEncryptionKey }}
          envFrom:
            - secretRef:
                name: {{ include "ftl.fullname" . }}-secrets
          {{- end }}
          env:
            - name: FTL_WORKING_DIR
              value: "/working"
            - name: TMPDIR
              value: "/working"
            - name: FTL_TIMELINE_ENDPOINT
              value: "http://{{ include "ftl.fullname" . }}-timeline:{{ .Values.timeline.port }}"
            - name: FTL_SCHEMA_ENDPOINT
              value: "http://{{ include "ftl.fullname" . }}-schema:{{ $.Values.schema.services.schema.port }}"
            - name: LOG_LEVEL
              value: "{{ .Values.provisioner.logLevel | default .Values.logLevel }}"
            - name: LOG_JSON
              value: "{{ .Values.provisioner.logJson | default .Values.logJson }}"
            - name: FTL_ARTEFACT_REPOSITORY
              value: "{{ .Values.registry.repository }}"
            - name: FTL_ARTEFACT_REPOSITORY_ALLOW_INSECURE
              value: "{{ .Values.registry.allowInsecure }}"
            - name: FTL_REALM
              value: {{ .Values.realmName }}
            {{- if .Values.provisioner.userNamespace}}
            - name: FTL_USER_NAMESPACE
              value: "{{ .Values.provisioner.userNamespace }}"
            {{- end }}
            - name: FTL_ARTEFACT_REPOSITORY_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "ftl.fullname" . }}-secrets
                  key: FTL_RUNNER_REGISTRY_USERNAME
                  optional: true
            - name: FTL_ARTEFACT_REPOSITORY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "ftl.fullname" . }}-secrets
                  key: FTL_RUNNER_REGISTRY_PASSWORD
                  optional: true
            - name: FTL_CRON_SERVICE_ACCOUNT
              value: "{{ .Values.cron.serviceAccountName }}"
            - name: FTL_CONSOLE_SERVICE_ACCOUNT
              value: "{{ .Values.console.serviceAccountName }}"
            - name: FTL_ADMIN_SERVICE_ACCOUNT
              value: "{{ .Values.admin.serviceAccountName }}"
            - name: FTL_HTTP_SERVICE_ACCOUNT
              value: "{{ .Values.ingress.serviceAccountName }}"
            - name: FTL_DEFAULT_RUNNER_IMAGE
              value: "{{ .Values.provisioner.defaultRunnerImage }}"
            - name: FTL_IMAGE_REPOSITORY_TEMPLATE
              value: "{{ .Values.provisioner.imageRepositoryTemplate }}"
            - name: FTL_IMAGE_TAG_TEMPLATE
              value: "{{ .Values.provisioner.imageTagTemplate }}"
            - name: FTL_IMAGE_REGISTRY
              value: "{{ .Values.provisioner.imageRegistry }}"
            - name: FTL_PROVISIONER_PLUGIN_CONFIG_FILE
              value: /config/config.toml
            {{- if .Values.provisioner.env }}
            {{- toYaml .Values.provisioner.env | nindent 12 }}
            {{- end }}
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /working
              name: working
          {{- include "ftl.resources" .Values.provisioner | nindent 10 }}
          {{- include "ftl.securityContext" .Values.provisioner | nindent 10 }}
      volumes:
        - name: config
          configMap:
            name: {{ .Values.provisioner.configMap }}
        - name: working
          emptyDir: {}
      {{- include "ftl.commonPodConfig" .Values.provisioner | nindent 6 }}
